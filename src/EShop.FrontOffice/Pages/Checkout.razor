@page "/Checkout"
@attribute [Authorize]
@inject ICartService CartService
@inject IOrderService OrderService
@inject INotifierCartService Notifier
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="cart-table-area section-padding-100" hidden="@completeCheckout">
    <div class="container-fluid">
        <EditForm Model="@request" OnValidSubmit="HandleValidSubmit" class="row">
            <div class="col-12 col-lg-8">
                <div class="checkout_details_area mt-50 clearfix">

                    <div class="cart-title">
                        <h2>Checkout</h2>
                    </div>
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <form>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <h6 class="checkout-input-title">First Name </h6>
                                <input class="form-control" id="first_name" placeholder="First Name" @bind="firstName" disabled />
                            </div>
                            <div class="col-md-6 mb-3">
                                <h6 class="checkout-input-title">Last Name</h6>
                                <input class="form-control" id="last_name" placeholder="Last Name" @bind="lastName" disabled />
                            </div>

                            <div class="col-12 mb-3">
                                <h6 class="checkout-input-title">Email</h6>
                                <input type="email" class="form-control" id="email" placeholder="Email" @bind="email" disabled>
                            </div>
                            <div class="col-12 mb-3">
                                <h6 class="checkout-input-title">Address</h6>
                                <InputText class="form-control" id="street_address" placeholder="Address" @bind-Value="request.Address" />
                            </div>

                            <div class="col-12 mb-3">
                                <h6 class="checkout-input-title">Phone number</h6>
                                <InputText class="form-control" id="phone_number" min="0" placeholder="Phone number" @bind-Value="request.PhoneNumber" />
                            </div>
                        </div>
                    </form>
                </div>
            </div>
            <div class="col-12 col-lg-4">
                <div class="cart-summary">
                    <h5>Cart Total</h5>

                    <ul class="summary-checkout">
                        @foreach (var line in cartLineVms)
                        {
                            <li><span>@line.Product.Name</span><span>@line.Quantity</span></li>
                        }
                    </ul>

                    <ul class="summary-table">
                        <li><span>subtotal:</span> <span>$@CartService.ComputeTotalValue()</span></li>
                        <li><span>delivery:</span> <span>Free</span></li>
                        <li><span>total:</span> <span>$@CartService.ComputeTotalValue()</span></li>
                    </ul>

                    <div class="cart-btn mt-100 mb-3">
                        <a href="/" class="btn amado-btn w-100">Continue shopping</a>
                    </div>

                    @if (cartLineVms != null && cartLineVms.Any())
                    {
                        <div class="cart-btn mt-100">
                            <button type="submit" class="btn amado-btn w-100">Checkout</button>
                        </div>
                    }
                </div>
            </div>
        </EditForm>
    </div>
</div>
<div class="col-md-4 offset-md-4 complete-checkout" hidden="@(!completeCheckout)">
    <h2>Thanks!</h2>
    <p>Thanks for placing your order.</p>
    <p>We'll ship your goods as soon as possible.</p>
    <div class="cart-btn mt-100 mb-3">
        <a href="/" class="btn amado-btn w-100">Continue shopping</a>
    </div>
</div>

@code
{
    private string firstName { get; set; }
    private string lastName { get; set; }
    private string email { get; set; }
    private OrderCreateRequest request = new OrderCreateRequest();
    private bool completeCheckout { get; set; }
    private IEnumerable<CartLineVm> cartLineVms { get; set; }

    protected override Task OnInitializedAsync()
    {
        completeCheckout = false;
        cartLineVms = CartService.Lines();
        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CartService.Reload();
            cartLineVms = CartService.Lines();

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

            firstName = authState.User.Claims
                                      .FirstOrDefault(c => c.Type.Equals("given_name"))?.Value;
            lastName = authState.User.Claims
                                      .FirstOrDefault(c => c.Type.Equals("family_name"))?.Value;
            email = authState.User.Claims
                                      .FirstOrDefault(c => c.Type.Equals("email"))?.Value;


            StateHasChanged();
        }
    }

    private async Task HandleValidSubmit()
    {
        request.Lines = cartLineVms.Select(x => new CartLineCreateRequest { ProductId = x.Product.Id, Quantity = x.Quantity })
                                   .ToList();
        var response = await OrderService.SaveOrder(request);
        completeCheckout = response.Id > 0 ? true : false;

        if (completeCheckout)
        {
            await Notifier.RemoveAllCartLines();
            StateHasChanged();
        }
    }
}
